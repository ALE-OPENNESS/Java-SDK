/*
* Copyright 2021 ALE International
*
* Permission is hereby granted, free of charge, to any person obtaining a copy of this 
* software and associated documentation files (the "Software"), to deal in the Software 
* without restriction, including without limitation the rights to use, copy, modify, merge, 
* publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons 
* to whom the Software is furnished to do so, subject to the following conditions:
* 
* The above copyright notice and this permission notice shall be included in all copies or 
* substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING 
* BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, 
* DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
package com.ale.o2g.types.telephony.call;

import com.ale.o2g.types.common.PartyInfo;

/**
 * Represent a participant to a call. A call can have several participants (case of a conference for exemple).
 * A participant is identified by its {@code participantId}, a unique {@code String} generated by the O2G server
 */
public class Participant {
    private String participantId;
    private PartyInfo identity;
    private boolean anonymous;
    private boolean undroppable;
    private MediaState state;
    
    
    /**
     * Get this participant identifier.
     * @return the participant identifier.
     */
	public final String getId() {
		return participantId;
	}

    /**
     * Return this participant identity.
     * @return the identity.
     */
    public final PartyInfo getIdentity() {
        return identity;
    }

    /**
     * Returns whether this paticipant is anonymous.
     * @return {@code true} if the participant is anonymous; {@code false} otherwise.
     */
    public final boolean isAnonymous() {
        return anonymous;
    }

    /**
     * Returns whether this participant can be dropped.
     * @return {@code true} if the participant can not be dropped; {@code false} otherwise.
     */
    public final boolean isUndroppable() {
        return undroppable;
    }


    /**
     * Returns the participant media state.
     * @return the state
     */
    public final MediaState getState() {
        return state;
    }

    protected Participant() {
    }
}
